---
import { Code } from '@astrojs/starlight/components';
import { getFixedStaticOOPClass } from '@src/utils/functions';

export interface Props {
    element_name?: string | null;
    oop_only_methods: any[];
    oop_compatible_functions: any[];
}

const { element_name = null, oop_only_methods, oop_compatible_functions } = Astro.props;
let oop_constructor = oop_compatible_functions.find(func => func.oop.constructorclass);
---
{element_name && oop_constructor && (
<section class="oop-constructor-section">
    <h4><a href="/reference/OOP">OOP</a> Constructor</h4>
    <p>
        {oop_constructor.oop.constructorclass}(...) is the constructor method for the <code>{element_name}</code> class (<a href={"/reference/"+oop_constructor.id}>{oop_constructor.id}</a>).
    </p>
</section>
)}

{oop_compatible_functions.length > 0 && (
<section class="oop-compatible-functions-section">
    <h4><a href="/reference/OOP">OOP</a> Methods and Variables</h4>
    <ul>
        {oop_compatible_functions.map((funcInfo: any) => (
            funcInfo.oop.constructorclass ? null : (
                <li>
                    {funcInfo.oop.method && (
                        <span style="margin-right: 10px;">
                            {funcInfo.oop.static ? getFixedStaticOOPClass(funcInfo.oop.element) : funcInfo.oop.element}{funcInfo.oop.static ? '.' : ':'}<a href={"/reference/"+funcInfo.id} title={funcInfo.id}>{funcInfo.oop.method}</a>(...)
                        </span>
                    )}

                    {funcInfo.oop.variable && (
                        <span>
                            <strong>Variable</strong>:
                            .{funcInfo.oop.variable}
                        </span>
                    )}
                </li>
            )
        ))}
    </ul>
</section>
)}


{oop_only_methods.length > 0 && (
<section class="oop-methods-section">
    <h4><a href="/reference/OOP">OOP</a>-Only Methods</h4>

    {oop_only_methods.map((method: any) => (
        <>
            <h5 id={method.name}><code>{method.name}</code></h5>
            {method.description && <p>{method.description}</p>}

            {method.overloads?.length > 0 && (
            <div class="overloads">
                {method.overloads.map((overload: any) => (
                <div class="overload">
                    <Code code={overload.signature} lang="lua" />
                    {overload.description && <p>{overload.description}</p>}
                    {overload.parameters?.length > 0 && (
                    <ul class="parameters">
                        {overload.parameters.map((param: any) => (
                        <li>
                            <strong>{param.name}</strong>
                            {param.optional && ' (optional)'}: <code>{param.type}</code> – {param.description}
                        </li>
                        ))}
                    </ul>
                    )}
                </div>
                ))}
            </div>
            )}

            {!method.overloads && method.signature && (
            <div class="signature">
                <Code code={method.signature} lang="lua" />
            </div>
            )}

            {method.parameters?.length > 0 && (
            <ul class="parameters">
                {method.parameters.map((param: any) => (
                <li>
                    <strong>{param.name}</strong>: <code>{param.type}</code> – {param.description}
                </li>
                ))}
            </ul>
            )}
        </>
    ))}

</section>
)}