---
import { getFunctionInfo } from '@src/utils/functions';
import { getEventTypePretty } from '@src/utils/events';
import { Icon } from '@astrojs/starlight/components';

interface Props {
  itemsByCategory: any;
  what: string;
}

const { itemsByCategory, what } = Astro.props;
const slugify = (str: string) => str.replace(/\s+/g, '-');

const categoryEmojis: Record<string, string> = {
  Account: "👤",
  Admin: "🛡️",
  ACL: "🔐",
  Announcement: "📢",
  Audio: "🎧",
  Sound: "🔊",
  Blip: "📍",
  Browser: "🌐",
  Building: "🏢",
  Camera: "📷",
  "Clothes and body": "🧍",
  Ped: "🚶",
  Colshape: "🔲",
  Cursor: "🖱️",
  Database: "🗄️",
  Discord: "💬",
  Drawing: "🎨",
  Effects: "✨",
  Event: "🎉",
  Explosion: "💥",
  File: "📄",
  Fire: "🔥",
  Engine: "⚙️",
  Element: "🧩",
  HTTP: "🔗",
  Light: "💡",
  Input: "⌨️",
  Map: "🗺️",
  GUI: "🖥️",
  Module: "📦",
  Marker: "📌",
  Matrix: "🧮",
  Object: "📦",
  Output: "📤",
  Path: "🛣️",
  Pickup: "🎁",
  Projectile: "🎯",
  Player: "🧑‍💻",
  "Radar area": "📡",
  Resource: "🪵",
  Server: "🖧",
  Searchlight: "🔦",
  "Settings registry": "⚙️",
  SVG: "🖼️",
  Team: "👥",
  "UTF8 Library": "🔤",
  Text: "📝",
  Utility: "🛠️",
  Water: "💧",
  Weapon: "🔫",
  "Weapon creation": "🛠️",
  XML: "📃",
  Vehicle: "🚗",
  World: "🌍"
};

function displayTitle(title: string) {
    switch (what) {
        case 'all_functions':
        case 'client_functions':
        case 'server_functions':
        case 'shared_functions':
            title = title + ' functions';
            break;
        case 'all_events':
        case 'client_events':
        case 'server_events':
            title = title + ' events';
            break;
    }
    return title;
}
function displayItem(item: any) {
    switch (what) {
        case 'all_functions':
            const funcInfo = getFunctionInfo(item.data);
            return `<a href=/${item.id}>${item.id}</a>
                    (<span class=${"side-"+funcInfo.type}>${funcInfo.typePretty}</span>)`;
        case 'all_events':
            return `<a href=/${item.id}>${item.id}</a>
                    (<span class=${"side-"+item.data.type}>${getEventTypePretty(item.data.type)}-side</span>)`;
        case 'client_functions':
        case 'server_functions':
        case 'shared_functions':
        case 'client_events':
        case 'server_events':
            return `<a href=/${item.id}>${item.id}</a>`;
    }
    return '?';
}
function displayCategory(category: string) {
  // Add emoji if available
  if (categoryEmojis[category]) {
    return `${categoryEmojis[category]} ${category}`;
  }
  return category;
}
---

<section data-pagefind-ignore>
  <h5>Table of Contents</h5>
  <div class="mtatoc-list">
    {Object.keys(itemsByCategory).sort((a, b) => a.localeCompare(b))
      .map(category => (
      <div class="mtatoc-item">
        <a href={`#${slugify(category)}`}>{displayCategory(category)}</a>
      </div>
    ))}
  </div>


  {Object.entries(itemsByCategory)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([category, items]) => (
    <section id={slugify(category)}>
      <h4>{displayTitle(category)}
        <a href={`#${slugify(category)}`}><Icon size="1.5rem" name="external" class="mtainfoicon"/></a>
      </h4>
      <ul>
        {items
          .slice()
          .sort((a, b) => a.id.localeCompare(b.id))
          .map(item => (
          <li set:html={displayItem(item)}></li>
        ))}
      </ul>
    </section>
  ))}
</section>

<style>
    .mtainfoicon {
        display: inline-block;
        vertical-align: center;
        cursor: pointer;
    }

    .mtatoc-list {
      font-size: 1.1rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .mtatoc-item {
      margin: 0;
      background-color: var(--sl-color-accent-low);
      border-radius: 0.5rem;
    }

    .mtatoc-item a {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      text-decoration: none;
      white-space: nowrap;
      color: var(--sl-color-white);
    }

</style>