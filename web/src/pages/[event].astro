---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getCollection } from 'astro:content';
import { marked } from 'marked';
import fs from "fs";
import path from "path";
import { Code } from '@astrojs/starlight/components';
import { getSeeAlsoLinksForItem } from '@src/utils/general';

import NoteBox from '@src/components/NoteBox.astro';
import type { NotesType } from '@src/utils/types';

import SeeAlsoSection from '@src/components/SeeAlsoSection.astro';
import CodeExamplesSection from '@src/components/CodeExamplesSection.astro';

export async function getStaticPaths() {
    const events = await getCollection('events');
    return events.map(event => ({
        params: { event: event.id },
        props: { event },
    }));
}

const { event } = Astro.props;
event.data.itemType = 'event';

const eventType = event.data.type;
const eventPath = path.dirname(event.filePath ?? "");
let eventExamples = event.data.examples;

let parametersCode = "";
// Build parameters code syntax e.g. "int param1, string param2"
if (event.data.parameters.length > 0) {
    parametersCode = event.data.parameters.map((param: any) => {
        return param.type + " " + param.name;
    }).join(", ");
}

let eventHandlerExample = {
    funcName: "handle" + event.id.charAt(0).toUpperCase() + event.id.slice(1),
    funcParams: event.data.parameters.map((param: any) => {
        return param.name;
    }).join(", "),
}

if ( eventExamples.length > 0 ){
    eventExamples = eventExamples.map((example: any) => {
        try {
            const luaCode = fs.readFileSync(path.resolve(`${eventPath}`, example.path), "utf8"); 
            return { ...example, luaCode };
        } catch (error) {
            console.error(`Error reading ${example.path}:`, error);
            return { ...example, luaCode: "Loading example error." };
        }
    });
}

let notesContent: NotesType = [];
if (Array.isArray(event.data.notes) && event.data.notes.length > 0) {
    notesContent = event.data.notes;
}

---

<div class={"show-type-badge-" + eventType}>
    <StarlightPage frontmatter={{
        template: 'doc',
        title: event.id,
        tableOfContents: false,
    }}>
        <!-- Description -->
        <Fragment set:html={marked(event.data.description)} />

        <!-- Notes -->
        {notesContent.length > 0 && (
            <div class="notes-section">
                {notesContent.map((note) => (
                    <NoteBox type={note.type}>
                        <Fragment set:html={marked(note.content)} />
                    </NoteBox>
                ))}
            </div>
        )}

        <h4>Parameters</h4>
        {parametersCode !== "" && <Code code={parametersCode} lang="lua"/>}
        {event.data.parameters.length > 0 && event.data.parameters.map((param: any) => (
            <ul>
                <li set:html={"<strong>" + param.name + "</strong>: " + param.description} />
            </ul>
        ))}

        <h4>Source</h4>
        <p set:html={"<strong>" + event.data.source_element.type + "</strong>: " + event.data.source_element.description} />

        <h4>Handler Example</h4>
        <Code code={
            `local function ${eventHandlerExample.funcName}(${eventHandlerExample.funcParams})\n` +
            `    -- Your code here\n` +
            `end\n` +
            `\n` +
            `-- Register the event handler\n` +
            `addEventHandler("${event.id}", elementAttachedTo, ${eventHandlerExample.funcName})`
        } lang="lua" />

        <CodeExamplesSection codeExamples={eventExamples} />

        <SeeAlsoSection seeAlsoLinks={getSeeAlsoLinksForItem(event)} currentId={event.id} />
    </StarlightPage>
</div>
