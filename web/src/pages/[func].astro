---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getCollection } from 'astro:content';
import { getFunctionInfo } from '@src/utils/functions';
import { marked } from 'marked';
import fs from "fs";
import path from "path";
import { Code } from '@astrojs/starlight/components';

import NoteBox from '@src/components/NoteBox.astro';
import '@src/styles/function-page.css';

export async function getStaticPaths() {
    const functions = await getCollection('functions');
    return functions.map(func => ({
        params: { func: func.id },
        props: { func },
    }));
}

const { func } = Astro.props;

const funcInfo = getFunctionInfo(func.data);
const funcType = funcInfo.type;
const funcPair = funcInfo.pair;
const funcPath = path.dirname(func.filePath ?? "");

const { description, notes: funcNotes, examples: rawExamples } = funcInfo;

let processedExamples: any[] = [];
if (Array.isArray(rawExamples) && rawExamples.length > 0) {
    processedExamples = rawExamples.map((example: any) => {
        try {
            const exampleFilePath = path.resolve(funcPath, example.path);
            const luaCode = fs.readFileSync(exampleFilePath, "utf8");
            return { ...example, luaCode };
        } catch (error) {
            console.error(`Error reading example file ${example.path} at ${path.resolve(funcPath, example.path)}:`, error);
            return { ...example, luaCode: `Error loading example: ${example.path}` };
        }
    });
}

let notesContent: string[] = [];
if (Array.isArray(funcNotes) && funcNotes.length > 0) {
    notesContent = funcNotes;
}

---

<div class={"show-type-badge-" + funcType}>
    <StarlightPage frontmatter={{
        template: 'doc',
        title: func.id,
        tableOfContents: false,
    }}>
        <!-- Pair Function Ref -->
        {funcPair && (
            <p><strong>Pair:</strong> <a href={ `/${funcPair}` }>{ funcPair }</a></p>
        )}

        <!-- Description -->
        {description && <Fragment set:html={marked(description)} />}

        <!-- Notes -->
        <div class="notes-section">
            {notesContent.map((note) => (
                <NoteBox>
                    <Fragment set:html={marked(note)} />
                </NoteBox>
            ))}
        </div>

        <!-- Examples -->
        {processedExamples.length > 0 && (
            <div class="examples-section">
                 <h3>Exemplos</h3>
                 {processedExamples.map((example: any) => (
                    <div class="function-example">
                        <Fragment set:html={marked(example.description)} />
                        <Code code={example.luaCode} lang="lua" title={path.basename(example.path)} />
                    </div>
                ))}
            </div>
        )}
    </StarlightPage>
</div>