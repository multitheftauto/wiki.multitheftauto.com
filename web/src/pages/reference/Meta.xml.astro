---
import { Code } from '@astrojs/starlight/components';
import AutoStarlightPage from '@src/components/AutoStarlightPage.astro';
import NoteBox from '@src/components/NoteBox.astro';
---

<AutoStarlightPage frontmatter={{
    template: 'doc',
    title: 'Meta.xml',
}}>

<p>The meta.xml file presents MTA with a set of metadata, such as the resource's name, the scripts to include, and which files to precache for sending to clients among other things.
It is also the scope of "elements". It is written in XML, which is based on HTML and is the parent of XHTML.</p><br/>

<div id="tags">
    <h3>Tags</h3>
    <p>XML is a textual data format which is widely used for the representation of data. MTA uses an XML-based language to describe the metadata for resources by using the tags below:</p>
    <ul>
        <li><strong>&lt;info/&gt;</strong> Information about this resource, possible parameters include (any arbitrary parameters can be used and read using <a href="/reference/getResourceInfo">getResourceInfo</a>).</li>
        <ul>
            <li><strong>author:</strong> The author of this resource.</li>
            <li><strong>version:</strong> The version of this resource.</li>
            <li><strong>name:</strong> The name of this resource.</li>
            <li><strong>description:</strong> A brief description of this resource.</li>
            <li><strong>type:</strong> The type of this resource, that can be "gamemode", "script", "map" or "misc".</li>
            <li><strong>gamemodes:</strong> The gamemodes to be compatible with the resource. It must be the name of the gamemode resource, not the gamemode name. If you want it to be compatible with multiple gamemodes, it must be in a comma-separated list without spaces. (e.g. gamemodes="test1,test2").</li>
        </ul>

        <li><strong>&lt;script/&gt;</strong> Source code for this resource, possible parameters are:</li>
        <ul>
            <li><strong>src:</strong> The file name of the source code. Since version <strong>1.6.0 r22430</strong>, it is possible to provide paths using <a href="https://en.wikipedia.org/wiki/Glob_(programming)">glob</a> format. Check <a href="#glob-example">example</a>.</li>
            <li><strong>type:</strong> The type of source code: "client", "server" or "shared".</li>
            <NoteBox type='info'>A shared script will be ran for both client and server, but separately as usual (basically adds the script twice: once for server and once for client).</NoteBox>
            <li><strong>cache:</strong> When the script file type is <code>client</code>, this setting controls whether the file is saved on the clients' hard drive. If you are concerned about your scripts security, make sure to read <a href="/articles/Script Security">Script security guide</a>. Default is <code>true</code>. Using <code>false</code> will mean the file is not saved.</li>
            <NoteBox type='info'><code>cache=false</code> files are started at the client first, so lua file load order might differ when mixing cache settings.</NoteBox>
            <li><strong>validate:</strong> If set to <code>false</code>, compatibility checks are skipped.</li>
        </ul>

        <li><strong>&lt;map/&gt;</strong> The map for a gamemode, possible parameters are:</li>
        <ul>
            <li><strong>src:</strong> <code>.map</code> file name (can be path too eg. <code>maps/filename.map</code>).</li>
            <li><strong>dimension:</strong> Dimension in which the map will be loaded (optional).</li>
        </ul>

        <li><strong>&lt;file/&gt;</strong> A client-side file. Generally these are images, .txd, .col, .dff or .xml files. They'll be downloaded by clients when the resources is started (or on join).</li>
        <ul>
            <li><strong>src:</strong> client-side file name (can be path too eg. <code>images/image.png</code>). Since version <strong>1.6.0 r22430</strong>, it is possible to provide paths using <a href="https://en.wikipedia.org/wiki/Glob_(programming)">glob</a> format. Check <a href="#glob-example">example</a>.</li>
            <li><strong>download:</strong> Whether or not to be sent to the client automatically (optional). Default is <code>true</code>. Using <code>false</code> will mean they are not sent on resource start but could later be used by <a href="/reference/downloadFile">downloadFile</a>.</li>
        </ul>

        <li><strong>&lt;include/&gt;</strong> Include resources that this resource will use.</li>
        <ul>
            <li><strong>resource:</strong> Resource name that you want to start with this resource.</li>
            <li><strong>minversion:</strong> Minimum version that resource needs to be (optional).</li>
            <li><strong>maxversion:</strong> Maximum version that resource needs to be (optional).</li>
        </ul>

        <li><strong>&lt;config/&gt;</strong> Config file (.xml) can be accessed by resource, possible parameters are:</li>
        <ul>
            <li><strong>src:</strong> The file name of the config file.</li>
            <li><strong>type:</strong> The type of the config file: "client" or "server".</li>
        </ul>

        <li><strong>&lt;export/&gt;</strong> This exports functions from this resource, so other resources can use them with <a href="reference/call">call</a>.</li>
        <ul>
            <li><strong>function:</strong> The function name.</li>
            <li><strong>type:</strong> Whether function is exported server-side or client-side (valid values are: "client", "server" and "shared").</li>
            <NoteBox type='info'>A shared export will make the function callable from both client and server scripts (basically adds the export twice: once for server and once for client).</NoteBox>
            <li><strong>http:</strong> Can the function be called via HTTP (true/false).</li>
        </ul>

        <li><strong>&lt;html/&gt;</strong></li>
        <ul>
            <li><strong>src:</strong> The filename for the HTTP file (can be a path). Since version <strong>1.6.0 r22430</strong>, it is possible to provide paths using <a href="https://en.wikipedia.org/wiki/Glob_(programming)">glob</a> format. Check <a href="#glob-example">example</a>.</li>
            <li><strong>default:</strong> The html file is one that is shown by default when visiting <code>/resourceName/</code> on the server. Only one html can be default, the rest are ignored. (true/false).</li>
            <li><strong>raw:</strong> The html file is not parsed by the Lua interpreter and is treated as binary data. Must be used for binary files (images mainly) (true/false).</li>
        </ul>

        <li><strong>&lt;settings/&gt;</strong> Most gamemodes use <a href="/articles/Settings system">settings system</a> to let server admins to configure it how they like. For instance you could set round time and then use <a href="/reference/get">get</a> and <a href="/reference/set">set</a> to get the value or change it, respectively.</li>
        <ul>
            <li><strong>&lt;setting/&gt;</strong> Resource settings can be accessed by resource and Admin panel, possible parameters are:</li>
            <ul>
                <li><strong>name:</strong> The setting name used by the scripts to get or set the setting value.</li>
                <li><strong>value:</strong> The setting default value used by the scripts.</li>
                <li><strong>friendlyname:</strong> A friendly name to the setting (optional).</li>
                <li><strong>accept:</strong> The values the setting could accept (optional).</li>
                <li><strong>examples:</strong> An Example of a value (optional).</li>
                <li><strong>desc:</strong> A description of the setting (optional).</li>
            </ul>
        </ul>

        <li><strong>&lt;min_mta_version/&gt;</strong>  Minimum version requirements for this resource to run correctly. When authoring resources, the minimum version should usually be set to the current released version of MTA:SA, in the sortable format (e.g. <code>1.6.0-9.22279.0</code>). See <a href="/reference/getVersion">getVersion</a> for details.</li>
        <ul>
            <li><strong>client:</strong> The minimum client version.</li>
            <li><strong>server:</strong> The minimum server version.</li>
            <li><strong>both:</strong> The minimum client and server version (instead of the previous two attributes).</li>
        </ul>
        
        <li><strong>&lt;aclrequest/&gt;</strong> A list of <a href="/articles/Access Control List">ACL</a> rights this resource will need. Any user with admin permission can accept or reject a resource ACL request by using the command: <code>/aclrequest [list/allow/deny] &lt;resourceName&gt; [&lt;rights&gt;/all]</code></li>
        <ul>
            <li><strong>&lt;right/&gt;</strong> an individual right.</li>
            <ul>
                <li><strong>name:</strong> The right name.</li>
                <li><strong>access:</strong> Set to <code>true</code> to allow the resource to access this right. Set to <code>false</code> to deny the access to this right.</li>
            </ul>
        </ul>

        <li><strong>&lt;sync_map_element_data/&gt;</strong> Controls whether map <a href="/reference/Element Data">element data</a> such as <code>PosX</code> and <code>DoubleSided</code> are transferred to the client. This data is usually not required by most gamemodes or resources. (Map Editor and Interiors require this to be not set to <code>false</code> to work). When set in a gamemode <strong>meta.xml</strong>, the setting will apply to all maps loaded by that resource.</li>
        <ul>
            <li><strong>false:</strong> Disable transfer of map element data for all resources. This can reduce map download times considerably.</li>
            <li><strong>true:</strong> Enable transfer of map element data for all resources. (If <code>false</code> and <code>true</code> are set in different resources, <code>true</code> will have priority and all resources will transfer map element data).</li>
        </ul>

        <li><strong>&lt;oop/&gt;</strong> Please refer to <a href="/reference/OOP">OOP</a> for documentation.</li>

        <li><strong>&lt;download_priority_group/&gt;</strong> If not set, the download priority group for a resource defaults to <strong>0</strong>. If this is set higher than 0, then the resource will be downloaded and started on the client earlier than other resources. This option is useful for resources with critical client functionality that other things in your gamemode (or fair play) rely on. If set to less than 0 (a negative number, like -1), the resource will be downloaded and started on the client later than other resources. As this can be confusing, here is an example:</li>
        <ul>
            <li><strong>Resource A:</strong> <Code code="<download_priority_group>20</download_priority_group>" lang="xml"/> will start earlier than..</li>
            <li><strong>Resource B:</strong> <Code code="<download_priority_group>10</download_priority_group>" lang="xml"/> In this case, Resource A will start <strong>earlier</strong> than Resource B because its value (20) is higher than (10). In turn, Resource B will still start earlier than a resource with a negative value or a value below 10 (like 5).</li>
        </ul>
    </ul>
</div>

<br/>
<div id="Example">
    <h3>Examples</h3>
    <p>Quick start template:</p>
    <Code code={`<meta>
    <script src="server.lua" type="server" />
    <script src="client.lua" type="client" />
</meta>`} lang="xml"/>

    <p>Here's an example of a meta file using some of the tags mentioned:</p>
    <Code code={`<meta>
    <info author="Slothman" version="1.0.2" name="Stealth" description="Allow scripts to insert a ped that simulates combat with a real player" type="gamemode" />

    <script src="stealthmain_server.lua" />
    <script src="noiseblip.lua" />
    <script src="mission_timer.lua" />
    <script src="gadgets_server.lua" />
    <script src="gadgets_client.lua" type="client"/>
    <script src="stealthmain_client.lua" type="client" validate="true"/>
    <script src="noisebar.lua" type="client"/>
    <script src="spycam.lua" type="client"/>
    <script src="riemann_z_demonstration.lua" type="client" cache="false"/>

    <map src="base.map" dimension="1"/>

    <file src="riot_shield.txd" download="false" />
    <file src="riot_shield.dff" download="false" />
    <file src="riot_shield.col" download="false" />
    <file src="armor.png" />
    <file src="camera.png" />
    <file src="cloak.png" />
    <file src="goggles.png" />
    <file src="mine.png" />
    <file src="radar.png" />
    <file src="shield.png" />

    <include resource="scoreboard" />
    <include resource="killmessages" />
    <include resource="maplimits" />
    
    <config src="help.xml" type="client"/>

    <export function="exampleExport1" type="server" />
    <export function="exampleExport2" type="client" />
    <export function="exampleExport3" type="shared" />

    <settings>
        <setting name="roundlimit" value="[6]" /> 
        <setting name="teamdamage" value="[1]" /> 
        <setting name="teambalance" value="[1]" /> 
        <setting name="isAllowedToShoot" value="true" />
        <setting name="admingroup" value="Admin,AdminPlus"
            friendlyname="Admin group list"
            group="_Advanced"
            accept="*"
            examples="Admin,Moderator,SuperModerator"
            desc="To use this resource, the player must belong to one of the groups listed."
            /> 
        <setting name="spazammo" value="[25]" /> 
        <setting name="m4ammo" value="[100]" />
        <setting name="shotgunammo" value="[25]" />
        <setting name="sniperammo" value="[20]" />
        <setting name="ak47ammo" value="[120]" />
        <setting name="rifleammo" value="[40]" />
        <setting name="deserteagleammo" value="[45]" />
        <setting name="pistolammo" value="[132]" />
        <setting name="uziammo" value="[150]" />
        <setting name="tec9ammo" value="[150]" />
        <setting name="silencedammo" value="[65]" />
        <setting name="grenadeammo" value="[4]" />
        <setting name="satchelammo" value="[4]" />
        <setting name="teargasammo" value="[4]" />
        <setting name="molatovammo" value="[4]" />
    </settings>

    <min_mta_version server="1.5.2-9.07903" client="1.5.2-9.07903" />

    <aclrequest>
        <right name="function.startResource" access="true" />
        <right name="function.stopResource" access="true" />
        <right name="function.setPlayerMuted" access="true" />
    </aclrequest>

    <sync_map_element_data>false</sync_map_element_data>

    <oop>false</oop>

    <download_priority_group>0</download_priority_group>
</meta>`} lang="xml"/>
</div>

<br/>
<div id="glob-example">
    <h3>Loading files via glob pattern</h3>
    <p>Since version <strong>1.6.0 r22430</strong> and above, you can conveniently load files into your resources using <a href="https://en.wikipedia.org/wiki/Glob%20(programming)">glob library</a> - see <a href="https://github.com/p-ranav/glob">more details</a>.</p>
    <Code code={`<meta>
    <script src="shared/**/*.lua" type="shared" cache="false" />
    <script src="client/**/*.lua" type="client" cache="false" />
    <script src="server/**/*.lua" type="server" />

    <file src="assets/fonts/**/*.ttf" />
    <file src="assets/sounds/**/*.mp3" />
    <file src="assets/images/**/*.png" />
</meta>`} lang="xml"/>
</div>

</AutoStarlightPage>