---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getCollection } from 'astro:content';
import fs from "fs";
import path from "path";
import { Code } from '@astrojs/starlight/components';
import { renderInlineMarkdown, getSeeAlsoLinksForItem } from '@src/utils/general';


import NoteBox from '@src/components/NoteBox.astro';
import type { NotesType } from '@src/utils/types';

import SeeAlsoSection from '@src/components/SeeAlsoSection.astro';
import CodeExamplesSection from '@src/components/CodeExamplesSection.astro';
import ItemDescription from '@src/components/ItemDescription.astro';
import EnhancedMarkdown from '@src/components/EnhancedMarkdown.astro';
import PreviewImages from '@src/components/PreviewImages.astro';

export async function getStaticPaths() {
    const events = await getCollection('events');
    return events.map(event => ({
        params: { event: event.id },
        props: { event },
    }));
}

const { event } = Astro.props;
event.data.itemType = 'event';

const eventType = event.data.type;
const eventPath = path.dirname(event.filePath ?? "");
let eventExamples = event.data.examples || [];

const eventParameters = event.data.parameters || [];
let parametersCode = "";
// Build parameters code syntax e.g. "int param1, string param2"
if (eventParameters.length > 0) {
    parametersCode = eventParameters.map((param: any) => {
        return param.type + " " + param.name;
    }).join(", ");
}

if ( eventExamples.length > 0 ){
    eventExamples = eventExamples.map((example: any) => {
        try {
            const luaCode = fs.readFileSync(path.resolve(`${eventPath}`, example.path), "utf8"); 
            return { ...example, luaCode };
        } catch (error) {
            console.error(`Error reading ${example.path}:`, error);
            return { ...example, luaCode: "Loading example error." };
        }
    });
}

let notesContent: NotesType = [];
if (Array.isArray(event.data.notes) && event.data.notes.length > 0) {
    notesContent = event.data.notes;
}

---

<div class={"show-type-badge-" + eventType}>
    <StarlightPage frontmatter={{
        template: 'doc',
        title: event.id,
        tableOfContents: false,
    }}>
        <!-- Description -->
        <ItemDescription description={event.data.description} incomplete={event.data.incomplete} />

        <!-- Preview Images -->
        <PreviewImages images={event.data.preview_images} />

        <!-- Notes -->
        {notesContent.length > 0 && (
            <div class="notes-section">
                {notesContent.map((note) => (
                    <NoteBox type={note.type}>
                        <EnhancedMarkdown content={note.content}/>
                    </NoteBox>
                ))}
            </div>
        )}

        <h4>Source</h4>
        <p set:html={"<strong>" + event.data.source_element.type + "</strong>: "
            + renderInlineMarkdown(event.data.source_element.description)} />

        <h4>Parameters</h4>
        {eventParameters.length > 0 ? (
            <>
            <Code code={parametersCode} lang="lua"/>
            {eventParameters.map((param: any) => (
                <ul>
                    <li
                        set:html={`<strong>${param.name}</strong>: ${renderInlineMarkdown(param.description)}`}
                    />
                </ul>
            ))}
            </>
        ) : (
            <p><em>This event does not pass any parameters to the handler function.</em></p>
        )}

        <!-- Canceling (optional) -->
        {event.data.canceling && (
            <>
            <h4>Canceling</h4>
            <p>{event.data.canceling}</p>
            </>
        )}

        <CodeExamplesSection codeExamples={eventExamples}, examplesRequired={true} theItem={event} />

        <SeeAlsoSection seeAlsoLinks={getSeeAlsoLinksForItem(event)} currentId={event.id} />
    </StarlightPage>
</div>
