---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getCollection } from 'astro:content';
import { getFunctionInfo, parseFunctionSyntaxes, getFixedStaticOOPClass } from '@src/utils/functions';
import { renderInlineMarkdown, getSeeAlsoLinksForItem } from '@src/utils/general';
import fs from "fs";
import path from "path";
import { Code } from '@astrojs/starlight/components';

import NoteBox from '@src/components/NoteBox.astro';
import type { NotesType } from '@src/utils/types';

import SeeAlsoSection from '@src/components/SeeAlsoSection.astro';
import CodeExamplesSection from '@src/components/CodeExamplesSection.astro';

import ChangelogList from '@src/components/ChangelogList.astro';
import ItemDescription from '@src/components/ItemDescription.astro';
import EnhancedMarkdown from '@src/components/EnhancedMarkdown.astro';
import PreviewImages from '@src/components/PreviewImages.astro';

import { marked } from 'marked';

export async function getStaticPaths() {
    const functions = await getCollection('functions');
    return functions.map(func => ({
        params: { func: func.id },
        props: { func },
    }));
}

const { func } = Astro.props;
func.data.itemType = 'function';

const funcInfo = getFunctionInfo(func.data);
const funcType = funcInfo.type;
const funcPair = funcInfo.pair;
const funcPath = path.dirname(func.filePath ?? "");

// join shared, client and server examples (in func.data) if any
let funcExamples: any[] = [];
if (func.data.shared && func.data.shared.examples) {
  funcExamples = [
    ...funcExamples,
    ...func.data.shared.examples.map((ex: any) => ({ ...ex, side: 'shared' })),
  ];
}

if (func.data.client && func.data.client.examples) {
  funcExamples = [
    ...funcExamples,
    ...func.data.client.examples.map((ex: any) => ({ ...ex, side: 'client' })),
  ];
}

if (func.data.server && func.data.server.examples) {
  funcExamples = [
    ...funcExamples,
    ...func.data.server.examples.map((ex: any) => ({ ...ex, side: 'server' })),
  ];
}
funcExamples = funcExamples.map((example: any) => {
    try {
        const luaCode = fs.readFileSync(path.resolve(`${funcPath}`, example.path), "utf8"); 
        return { ...example, luaCode };
    } catch (error) {
        console.error(`Error reading ${example.path}:`, error);
        return { ...example, luaCode: "Loading example error." };
    }
});

let notesContent: NotesType = [];
if (Array.isArray(funcInfo.notes) && funcInfo.notes.length > 0) {
    notesContent = funcInfo.notes;
}

const metaArray = func.data[funcInfo.type]?.meta ?? [];
const changelogEntries = metaArray.find(m => m.changelog)?.changelog ?? [];
const needsChecking = metaArray.find(m => m.needs_checking)?.needs_checking ?? undefined;

let funcSyntaxes = parseFunctionSyntaxes(func.id, func.data);
---

<div class={"show-type-badge-" + funcType}>
    <StarlightPage frontmatter={{
        template: 'doc',
        title: func.id,
        tableOfContents: false,
    }}>
        {needsChecking && (
            <div class="notes-section">
                <NoteBox type="needs_checking">
                    <EnhancedMarkdown content={needsChecking}/>
                </NoteBox>
            </div>
        )}

        <!-- Pair Function Ref -->
        {funcPair && (
            <p><strong>Pair:</strong> <a href={`/reference/${funcPair}`}>{ funcPair }</a></p>
        )}

        <!-- Description -->
        <ItemDescription description={funcInfo.description} incomplete={funcInfo.incomplete} />

        <!-- Notes -->
        {notesContent.length > 0 && (
            <div class="notes-section">
                {notesContent.map((note) => (
                    <NoteBox type={note.type}>
                        <EnhancedMarkdown content={note.content} />
                    </NoteBox>
                ))}
            </div>
        )}

        <!-- OOP Syntax -->
        {funcInfo.oop && (
        <>
        <div class="function-oop">
            <h4>OOP Syntax <a class="small-text" href="/reference/OOP">Help! I don't understand this!</a></h4>
            <ul>

            {funcInfo.oop.note && (
                <li><i><Fragment set:html={marked("<b>Note:</b> " + funcInfo.oop.note)} /></i></li>
            )}

            {funcInfo.oop.constructorclass ? (
                <li>
                <strong>Constructor</strong>:
                <a href={`/reference/${funcInfo.oop.element}`}>{funcInfo.oop.constructorclass}</a>(...)
                </li>
            ) : (
                <>
                    {funcInfo.oop.method && (
                        <li>
                        <strong>Method</strong>:
                        <a href={`/reference/${funcInfo.oop.element}`}>{funcInfo.oop.static ? getFixedStaticOOPClass(funcInfo.oop.element) : funcInfo.oop.element}</a>{funcInfo.oop.static ? '.' : ':'}{funcInfo.oop.method}(...)
                        </li>
                    )}

                    {funcInfo.oop.variable && (
                        <li>
                        <strong>Variable</strong>:
                        .{funcInfo.oop.variable}
                        </li>
                    )}
                </>
            )}
            </ul>
        </div>
        </>
        )}

        <!-- Syntaxes -->
        {funcSyntaxes.length > 0 && funcSyntaxes.map((syntax: any) => (
            <div class="function-syntax">
                {funcType === syntax.type && (
                    <h4>Syntax</h4>
                ) || (
                    <h4>{syntax.type.charAt(0).toUpperCase() + syntax.type.slice(1)} Syntax</h4>
                )}
                <Code code={syntax.syntaxString} lang="lua" />
                {syntax.parameters.length > 0 && (
                <>
                    {syntax.parameters.some((param: any) => !param.default) && (
                    <>
                        <h5>Required Arguments</h5>
                        <ul>
                        {syntax.parameters
                            .filter((param: any) => !param.default)
                            .map((param: any) => (
                            <li
                                set:html={`<strong>${param.name}</strong>: ${renderInlineMarkdown(param.description)}`}
                            />
                            ))}
                        </ul>
                    </>
                    )}

                    {syntax.parameters.some((param: any) => param.default) && (
                    <>
                        <h5>Optional Arguments</h5>
                        <p><strong>NOTE</strong>: When using <a href="/reference/Optional_Arguments">optional arguments</a>, you might need to supply all arguments before the one you wish to use.</p>
                        <ul>
                        {syntax.parameters
                            .filter((param: any) => param.default)
                            .map((param: any) => (
                            <li
                                set:html={
                                    `<strong>${param.name}</strong> (default: <em>${param.default}</em>): ${renderInlineMarkdown(param.description)}`
                                }
                            />
                            ))}
                        </ul>
                    </>
                    )}
                </>
                )}
                {syntax.returns && (
                    <h4>Returns</h4>
                    <ul>
                        {syntax.returns.values.map((ret: any) => (
                            <li set:html={"<strong>" + ret.type + "</strong>: " + renderInlineMarkdown(ret.name)} />
                        ))}
                    </ul>

                    <EnhancedMarkdown content={syntax.returns.description}/>
                )}
            </div>
        ))}

        <CodeExamplesSection codeExamples={funcExamples}, examplesRequired={true} theItem={func} />

        <!-- Preview Images -->
        <PreviewImages images={funcInfo.preview_images} />
        
        <!-- Changelog -->
        <ChangelogList entries={changelogEntries} />

        <SeeAlsoSection seeAlsoLinks={getSeeAlsoLinksForItem(func)} currentId={func.id} />
    </StarlightPage>
</div>