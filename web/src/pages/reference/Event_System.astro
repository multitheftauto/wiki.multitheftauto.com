---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { Code } from '@astrojs/starlight/components';
---
<StarlightPage frontmatter={{
  template: 'doc',
  title: 'Event System',
  tableOfContents: false,
}}>
<p>
The event system is a fundamental part of MTA scripting. It works closely with the <a href="/reference/Element_tree">element tree</a> to allow scripts to respond to things that happen in the game — for example, when a player enters a marker or clicks an element. Every event has a <strong>source</strong> element: the element where the event originated.
</p>

<h2 id="event-handlers">Event Handlers</h2>
<p>
To react to events, you attach event handlers to elements using <a href="/reference/addEventHandler">addEventHandler</a>. Once attached, your handler will respond to events triggered by:
</p>
<ul>
  <li>The element itself</li>
  <li>Its parent elements (and their parents, recursively)</li>
  <li>Its child elements (and their children, recursively)</li>
</ul>

<p>
Because of this, attaching a handler to the <em>root</em> element will catch every event in the entire element tree. However, this is rarely needed — you should generally attach handlers to the most specific element possible. For example, if you only care when a player enters a certain marker, just attach your handler to that marker.
</p>

<h3>Handler Context Variables</h3>
<p>
Every event handler automatically receives some useful variables:
</p>
<ul>
  <li><strong>source</strong>: The element where the event originated.</li>
  <li><strong>this</strong>: The element the handler is attached to.</li>
  <li><strong>eventName</strong>: The name of the triggered event.</li>
</ul>

<p>
On the server side, there's an extra variable:
</p>
<ul>
  <li><strong>client</strong>: The client that triggered the event with <a href="/reference/triggerServerEvent">triggerServerEvent</a>, if applicable.</li>
</ul>

<p>
Read the <a href="/articles/Script_security">Script security</a> article for more information on how to use events securely and effectively.
</p>

<h3>Event Propagation</h3>
<p>
Events propagate through the element tree: they start at the <em>source</em> element, and then bubble up to parent elements and down to children. This has some implications:
</p>
<ul>
  <li>Triggering an event on the <em>root</em> element will also trigger it on every element in the tree — usually not recommended.</li>
  <li>Handlers on the <em>root</em> element will catch every event — use this only when necessary.</li>
  <li>You can attach a handler to your resource's root element to catch all events from elements your resource created.</li>
  <li>You can create "dummy" elements to act as containers for groups of child elements and attach your handler to the dummy.</li>
  <li>
    You can define dummy elements in a <code>.map</code> file (e.g. a "flag") and dynamically create "real" objects as their children.
    This allows one resource to manage the representation (e.g. the object model) while another handles game logic. For example, a map resource can define the flag, and a gamemode resource can listen for capture events on it.
  </li>
</ul>

<h3>Event Parameters</h3>
<p>
Event handlers also receive specific parameters depending on the event. For example, the <a href="/reference/onClientGUIClick">onClientGUIClick</a> event provides the following parameters:
</p>

<Code code="string button, string state, int absoluteX, int absoluteY" lang="lua" />

<p>
When writing a handler, be sure to check the documentation to see what arguments are passed for each event — they vary from one event to another.
</p>

<h2 id="built-in-events">Built-in Events</h2>
<p>
MTA provides a wide range of built-in events, which are listed here:
</p>
<ul>
  <li><a href="/reference/Client_Scripting_Events">Client Scripting Events</a></li>
  <li><a href="/reference/Server_Scripting_Events">Server Scripting Events</a></li>
</ul>

<h2 id="custom-events">Custom Events</h2>
<p>
You can define and trigger your own custom events to communicate between different parts of your code — or even different resources. To define a custom event, use <a href="/reference/addEvent">addEvent</a>. You can then trigger it using <a href="/reference/triggerEvent">triggerEvent</a>.
</p>

<p>
For instance, in a Capture the Flag game mode, you could trigger an <a href="/reference/onFlagCaptured">onFlagCaptured</a> event when a player captures a flag:
</p>
<ol>
  <li>Attach a handler to the <a href="/reference/onMarkerHit">onMarkerHit</a> event.</li>
  <li>Check if the player has the flag.</li>
  <li>If yes, trigger the custom <a href="/reference/onFlagCaptured">onFlagCaptured</a> event.</li>
</ol>

<p>
This allows other resources to react to your event however they want.
</p>

<h2 id="canceling">Canceling Events</h2>
<p>
You can cancel certain events using <a href="/reference/cancelEvent">cancelEvent</a>. This stops the default action from occurring. For example:
</p>
<ul>
  <li>Canceling <a href="/reference/onPickupUse">onPickupUse</a> stops the player from picking up the item.</li>
  <li>Canceling <a href="/reference/onVehicleStartEnter">onVehicleStartEnter</a> stops the player from entering the vehicle.</li>
</ul>

<p>
To check if an event has already been canceled, use <a href="/reference/wasEventCancelled">wasEventCancelled</a>.
</p>

<p>
Note: Canceling an event does <strong>not</strong> stop other event handlers from being triggered.
</p>

</StarlightPage>