---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';

import { getSeeAlsoLinksFromList } from '@src/utils/general';
import SeeAlsoSection from '@src/components/SeeAlsoSection.astro';

import { Code } from '@astrojs/starlight/components';

import NoteBox from '@src/components/NoteBox.astro';

import { animations, animationDescriptions, animationDetails } from '@src/data/animations';

let luaTable = `local animations = {`;
Object.entries(animations).forEach(([group, anims]) => {
    luaTable += `\n  ["${group}"] = {`;
    anims.map(name => {
        luaTable += `\n    "${name}",`;
    });
    luaTable += `\n  }`;
});
luaTable += `\n}\n`;

function getAnimDesc(name: string): string {
    const desc = Object.entries(animationDescriptions).find(([animName]) => animName.toLowerCase() === name.toLowerCase());
    if (desc) {
        return desc[1];
    }
    return '';
}
function getAnimFrames(name: string): number {
    const details = Object.entries(animationDetails).find(([animName]) => animName.toLowerCase() === name.toLowerCase());
    if (details) {
        return details[1].frames;
    }
    return 0;
}
function getAnimDuration(name: string): number {
    const details = Object.entries(animationDetails).find(([animName]) => animName.toLowerCase() === name.toLowerCase());
    if (details) {
        return details[1].duration;
    }
    return 0;
}

let animationsByGroup: Record<string, { name: string, desc: string }[]> = {};
Object.entries(animations).forEach(([group, anims]) => {
    animationsByGroup[group] = anims.map(name => {
        return {
            name: name,
            desc: getAnimDesc(name),
        };
    });
});

let luaTableWithDescriptions = `local animationsWithDescriptions = {`;
Object.entries(animations).forEach(([group, anims]) => {
    luaTableWithDescriptions += `\n  ["${group}"] = {`;
    anims.map(name => {
        const desc = getAnimDesc(name);
        luaTableWithDescriptions += `\n    ["${name}"] = "${desc}",`;
    });
    luaTableWithDescriptions += `\n  }`;
});
luaTableWithDescriptions += `\n}\n`;

---
<StarlightPage frontmatter={{
    template: 'doc',
    title: 'Animations',
    tableOfContents: false,
}}>
    <p>These animations can be used with <a href="/reference/Scripting_Functions#Ped">Animation functions</a>. The block/group names and individual animation names are their identifiers.</p>
    <p><strong>Lua tables</strong> with this data are available at the bottom of the page.</p>
    
    <NoteBox type='tip'><strong>Tip</strong>: Use your browser's search function (<strong>Ctrl+F or Cmd+F</strong>) to quickly find an animation by name or group/block name.</NoteBox>
    <NoteBox type="warning">Animations marked with <span class="important">*</span> are meant to be applied to <strong>objects</strong> (e.g. parachute movement) in GTA:SA.<br>These will not work when applied to peds/players.</NoteBox>

    <ul class="anims-toc">
        {Object.entries(animations).map(([group, anims]) => (
            <li>
                <a href={`#${group}`}>{group}</a>
            </li>
        ))}
    </ul>
    <details class="animations-list">
        <summary>All animations sorted by <strong>animation group</strong>:</summary>
        <table class="anims-table">
            <thead>
                <tr>
                    <th>Animation Name</th>
                    <th>Description</th>
                    <th>Number<br>of Frames</th>
                    <th>Duration<br>(seconds)</th>
                </tr>
            </thead>
            <tbody>
                {Object.entries(animationsByGroup).map(([group, anims]) => (
                    <tr>
                        <td colspan="4" class="group-name" id={group}><strong>{group}</strong> ({anims.length} animation{anims.length !== 1 ? 's' : ''})</td>
                    </tr>
                    <>
                        {anims.map(anim => (
                            <tr>
                                <td>{anim.name}{(
                                    anim.name.endsWith('_o')
                                    || anim.name.endsWith('_door')
                                    || anim.name.startsWith('bd_fire')
                                    || anim.name === 'door_jet'
                                ) && <span class="important"> *</span>}</td>
                                <td class="anim-desc">{anim.desc}</td>
                                <td>{getAnimFrames(anim.name)}</td>
                                <td>{getAnimDuration(anim.name)}</td>
                            </tr>
                        ))}
                    </>
                ))}
            </tbody>
        </table>
    </details>
    
    <section data-pagefind-ignore>
        <details>
            <summary>Lua table of animations listed here:</summary>
            <Code lang="lua" code={luaTable}/>
        </details>
        <details>
            <summary>Lua table of animations with descriptions:</summary>
            <Code lang="lua" code={luaTableWithDescriptions}/>
        </details>
    </section>

    <SeeAlsoSection seeAlsoLinks={getSeeAlsoLinksFromList([
        'reference:ID_Lists',
    ])} currentId='' />
</StarlightPage>

<style>
    .anims-toc {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        list-style: none;
        padding: 0;
        margin: 0;
    }
    .important {
        color: red;
        font-weight: bold;
        font-size: 1.2rem;
    }
    .anim-desc {
        font-style: italic;
        color: var(--sl-color-gray-2);
    }
    .anims-table, .anims-toc {
        font-family: tahoma, arial, helvetica;
    }
    .anims-table th {
        color: var(--sl-color-accent-high);
        text-align: center;
        vertical-align: middle;
    }
    .anims-table th, td {
        padding: 0.5rem;
        border: 1px solid var(--sl-color-gray-4);
    }
    .group-name {
        background-color: var(--sl-color-gray-4);
        color: var(--sl-color-gray-1);
    }
</style>