---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getSeeAlsoLinksFromList } from '@src/utils/general';
import SeeAlsoSection from '@src/components/SeeAlsoSection.astro';
import ElementOOPInfo from '@src/components/ElementOOPInfo.astro';
import { getElementsByCategory, hasOopMethods, getOOPFunctionsForElement } from '@src/utils/elements';
const elementsByCategory = getElementsByCategory();
---
<StarlightPage frontmatter={{
  template: 'doc',
  title: 'Element',
  tableOfContents: false,
}}>
  <p>In order to perform operations on MTA objects via scripting, pointers to internal classes are exported to scripts as Lua userdata. Each of these classes has a number of exported scripting functions associated with them. Elements that have a physical representation in the game are also known as <a href="/Entity">Entities</a>.</p>
  <p>An <strong>element</strong> is a generic class that can represent almost all in-game entities. The built-in element types are:</p>
  <ul>
    {Object.entries(elementsByCategory).map(([category, elements], index) => (
      <section>
            {/* <details {...(index === 0 ? { open: true } : {})}> */}
            <details>
                <summary>{category} elements</summary>
                <ul>
                    {elements.map(element => (
                        <li>
                            <a href={`/${element.id}`}>{element.id}</a>
                            {hasOopMethods(element) ? <span class="small-text">[OOP]</span> : ''}
                        </li>
                    ))}
                </ul>
            </details>
        </section>
    ))}
  </ul>

  <hr>

  <ElementOOPInfo
    oop_only_methods={[]}
    oop_compatible_functions={getOOPFunctionsForElement('element')}
  />

  <SeeAlsoSection seeAlsoLinks={getSeeAlsoLinksFromList([
      'article:Element_tree',
      'article:Entity',
  ])} currentId='' />
</StarlightPage>
